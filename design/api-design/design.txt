GET:  /api/plants/{id}
    ->  {status: int, data: data}

POST: /api/plants/add
    <-  data  # fields that can be null can be left undefined
    ->  {status: int, id: int}
    * must be authenticated

POST: /api/plants/edit
    <-  data  # only changed data if no change then undefined  # "only changed" this might be useful if we decide to stage changes for moderation
    ->  {status: int, data: updated_data}  # all data is returned with the updates applied
    * must be authenticated

POST: /api/plants/delete
    <-  {id: int, force: bool|undefined, restore: bool|undefined }
    ->  {status: int}
    * must be authenticated
    * for non mods force=true is an error  #? maybe also for restore=true # maybe only the user who flagged it can restore it? (mods can always restore)
    * for mods to full delete must also send force=true.
        * this way mods can still flag for delete if needed
    + force=false   sets delete flag   (default)
    + force=true    fully deletes
    + restore=true  removes delete flag  (implied default is false)
    + force==true && restore==true is an error
    # 💡 could call "force" "destroy" # might be clearer?

POST: /api/users
    <-  {username: string, date_joined: date, role: string}
    ->  {status: int, id: int}
    * must be authenticated

PUT: /api/users/{id}
    <-  {username: string, date_joined: date, role: string}
    ->  {status: int, data: updated_data}
    * must be authenticated

DELETE: /api/users/{id}
    ->  {status: int}
    * must be authenticated

POST: /api/comments
    <-  {plant_id: int, user_id: int, comment: string, date_posted: datetime}
    ->  {status: int, id: int}
    * must be authenticated

PUT: /api/comments/{id}
    <-  {plant_id: int, user_id: int, comment: string, date_posted: datetime}
    ->  {status: int, data: updated_data}
    * must be authenticated

DELETE: /api/comments/{id}
    ->  {status: int}
    * must be authenticated

POST: /api/images
    <-  {plant_id: int, image_url: string, date_uploaded: datetime}
    ->  {status: int, id: int}
    * must be authenticated

PUT: /api/images/{id}
    <-  {plant_id: int, image_url: string, date_uploaded: datetime}
    ->  {status: int, data: updated_data}
    * must be authenticated

DELETE: /api/images/{id}
    ->  {status: int}
    * must be authenticated

POST: /api/species
    <-  {scientific_name: string, division: string, class: string, order: string, family: string, genus: string, species: string, common_name: string, season: string}
    ->  {status: int, id: int}
    * must be authenticated

PUT: /api/species/{id}
    <-  {scientific_name: string, division: string, class: string, order: string, family: string, genus: string, species: string, common_name: string, season: string}
    ->  {status: int, data: updated_data}
    * must be authenticated

DELETE: /api/species/{id}
    ->  {status: int}
    * must be authenticated

# ❔ should it be /plants/ or /plant/

# ❔ which syntax is better
# /api/plants/{id}/edit   <- data
# /api/plants/edit/{id}   <- data
# /api/plants/edit  <- {id: int, data: data}
# /api/plants/edit  <- data    # or could put id in the data

Note: for any status there can also be msg: or maybe name it message: # probably only set for errors or could always set it?
Note: data and updated_data are of type "javascript Object"
Note: data will not be returned on error